import "./chunk-BUSYA2B4.js";

// ../../../../node_modules/s/dist/esm/s/XLSXWrapper.js
var _XLSX;
if (typeof XLSX !== "undefined")
  _XLSX = XLSX;
function get_XLSX() {
  return _XLSX;
}
function set_XLSX(xlsx) {
  _XLSX = xlsx;
}

// ../../../../node_modules/s/dist/esm/s/worksheet/WorksheetCollection.js
var WorksheetCollection = class {
  constructor(wb) {
    this._wb = wb;
  }
};

// ../../../../node_modules/s/dist/esm/s/names/DefinedName.js
var DefinedName = class {
  constructor(name) {
    this._name = name;
  }
  get raw() {
    return this._name;
  }
};

// ../../../../node_modules/s/dist/esm/s/names/WorkbookDefinedNameCollection.js
var WorkbookDefinedNameCollection = class {
  constructor(wb) {
    this._wb = wb;
  }
  /**
   * Get read-only array of global defined names
   */
  get items() {
    if (!this._wb.Workbook)
      return [];
    if (!this._wb.Workbook.Names)
      return [];
    return this._wb.Workbook.Names.filter((name) => {
      name.Sheet == null;
    }).map((name) => new DefinedName(name));
  }
  /**
   * Get defined name object
   */
  getName(name) {
    if (this._wb.Workbook && this._wb.Workbook.Names) {
      const names = this._wb.Workbook.Names;
      for (let i = 0; i < names.length; ++i) {
        if (names[i].Name.toLowerCase() != name.toLowerCase())
          continue;
        if (names[i].Sheet != null)
          continue;
        return new DefinedName(names[i]);
      }
    }
    throw new Error(`Cannot find defined name |${name}|`);
  }
  /**
   * Number of global defined names
   */
  get count() {
    if (!this._wb.Workbook)
      return 0;
    if (!this._wb.Workbook.Names)
      return 0;
    return this._wb.Workbook.Names.filter((name) => {
      typeof name.Sheet == "undefined";
    }).length;
  }
  /**
   * Add or update defined name
   * @param name String name
   * @param ref Range object or string range/formula
   * @param comment Optional comment
   */
  add(name, ref, comment) {
    try {
      return this.getName(name);
    } catch (e) {
      const nm = { Name: name, Ref: ref.toString(), Comment: comment || "" };
      if (!this._wb.Workbook)
        this._wb.Workbook = {};
      if (!this._wb.Workbook.Names)
        this._wb.Workbook.Names = [];
      this._wb.Workbook.Names.push(nm);
      return new DefinedName(nm);
    }
  }
};

// ../../../../node_modules/s/dist/esm/s/Workbook.js
var Workbook = class {
  constructor(wb) {
    this._wb = wb || get_XLSX().utils.book_new();
    this._ws = new WorksheetCollection(this._wb);
    this._names = new WorkbookDefinedNameCollection(this._wb);
  }
  get wb() {
    return this._wb;
  }
  get names() {
    return this._names;
  }
  get worksheets() {
    return this._ws;
  }
};
export {
  Workbook,
  get_XLSX,
  set_XLSX
};
/*! Bundled license information:

s/dist/esm/s/XLSXWrapper.js:
  (*! s.js (C) 2019-present SheetJS -- https://sheetjs.com *)

s/dist/esm/s/worksheet/WorksheetCollection.js:
  (*! s.js (C) 2019-present SheetJS -- https://sheetjs.com *)

s/dist/esm/s/names/DefinedName.js:
  (*! s.js (C) 2019-present SheetJS -- https://sheetjs.com *)

s/dist/esm/s/names/WorkbookDefinedNameCollection.js:
  (*! s.js (C) 2019-present SheetJS -- https://sheetjs.com *)

s/dist/esm/s/Workbook.js:
  (*! s.js (C) 2019-present SheetJS -- https://sheetjs.com *)

s/dist/esm/index.js:
  (*! s.js (C) 2019-present SheetJS -- https://sheetjs.com *)
*/
//# sourceMappingURL=s.js.map
